#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.

source "$ZDOTDIR/prezto/init.zsh"

# Aliases

## Project shortcuts.
alias p='cd ~/Workspaces'
alias pios='cd ~/Workspaces/iOS'
alias pmisc='cd ~/Workspaces/Misc'
alias pswift='cd ~/Workspaces/Swift'
alias pfrontend='cd ~/Workspaces/Frontend'

## Lua Aliases.
alias lua='/usr/local/bin/lua-5.3'
alias luac='/usr/local/bin/luac-5.3'
alias luar='/usr/local/bin/luarocks-5.3'
alias luao='/usr/local/bin/lua'
alias luaoc='/usr/local/bin/luac'
alias luaor='/usr/local/bin/luarocks'T

## Show hidden files in Finder.app.
alias findershow='defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder'
alias finderhide='defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder'

## Enable/Disable V2Ray
alias v2on='launchctl load ~/Library/LaunchAgents/org.v2ray.plist'
alias v2off='launchctl unload ~/Library/LaunchAgents/org.v2ray.plist'
alias v2rld='v2off && v2on'

## Miscellaneous shortcuts.
alias pg='ps aux | grep'
alias py='python'
alias py3='python3'
alias spm='swift package'
alias ydl='youtube-dl'
alias sml='streamlink'

# Functions

## Enable/Disable proxy
function proxyon() {
  local host_port='127.0.0.1:8080'

  export http_proxy="http://$host_port"
  export https_proxy=$http_proxy
  git config --global http.proxy $host_port
  git config --global https.proxy $host_port
  echo 'proxy = "socks5://127.0.0.1:1080"' >! $HOME/.config/.curlrc
}

function proxyoff() {
  export http_proxy=''
  export https_proxy=''
  git config --global http.proxy ''
  git config --global https.proxy ''
  echo '' >! $HOME/.config/.curlrc
}

## Open $(pwd)/$@ in Finder.app.
function opend() {
  if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

## Reload shell.
function reload() {
  local compdump_files="$ZDOTDIR/.zcompdump*"

  if ls $compdump_files &> /dev/null; then
    rm -f $compdump_files
  fi

  exec $SHELL -l
}

## File size calculator.
function filesize() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

## Open man page with Dash app.
function dman() {
  open "dash://man:$@"
}

## Open man page in a easy-to-read, standalone window.
function xman() {
  open "x-man-page://$@"
}

## Move file to directory without retyping the name.
function mv2d() {
  echo mv "$1" "$2/${1##*/}_$3"
}

## Encode/Decode string using base64.
function b64e() {
  echo "$@" | base64
}

function b64d() {
  echo "$@" | base64 -D
}

## Find current IP address.
function myip() {
  dig +short myip.opendns.com @resolver1.opendns.com
}

## Generate a secure password.
function passgen() {
  LC_ALL=C tr -dc ${1:-"[:graph:]"} < /dev/urandom | head -c ${2:-20}
}

## Flush DNS caches.
function flushdns() {
  sudo dscacheutil -flushcache && \
  sudo killall -HUP mDNSResponder
}

## Create application icon file from an 1024px master file.
function mkicns() {
    if [[ -z "$@" ]]; then
        echo "Input file missing"
    else
        filename=${1%.*}
        mkdir $filename.iconset
        sips -z 16 16   $1 --out $filename.iconset/icon_16x16.png
        sips -z 32 32   $1 --out $filename.iconset/icon_16x16@2x.png
        sips -z 32 32   $1 --out $filename.iconset/icon_32x32.png
        sips -z 64 64   $1 --out $filename.iconset/icon_32x32@2x.png
        sips -z 128 128 $1 --out $filename.iconset/icon_128x128.png
        sips -z 256 256 $1 --out $filename.iconset/icon_128x128@2x.png
        sips -z 256 256 $1 --out $filename.iconset/icon_256x256.png
        sips -z 512 512 $1 --out $filename.iconset/icon_256x256@2x.png
        sips -z 512 512 $1 --out $filename.iconset/icon_512x512.png
        cp $1 $filename.iconset/icon_512x512@2x.png
        iconutil -c icns $filename.iconset
        rm -r $filename.iconset
    fi
}
